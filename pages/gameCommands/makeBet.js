const bet = require("../../database/managers/bet");
const game = require("../../database/managers/game");
const { getUser } = require("../../database/managers/user");
const { gamePayloadsTranslate } = require("./gameTools");
const { randomDependingMode, makeArrayFromObject, totalValues } = require("./generateCombination");
const { createSecretWord, createHash } = require("./hash");
const chat = require("../../database/managers/chat");
const { numberWithSpace } = require("../../settings/tools");

module.exports = makeBet = async (msg) => {
    const { balance, id, name } = await getUser(msg.senderId)

    let gameId = ''

    const peerId = msg.peerId

    let payload = msg.messagePayload.command

    let splitPayload = payload.split(':')

    const betOn = splitPayload[1]

    const checkChat = await chat.getChat(peerId)

    const gameMode = checkChat.game

    const checkGame = await game.getGame(peerId)

    if (!checkGame){
        const valuesForHash = randomDependingMode[gameMode]()

        const arrayValues = makeArrayFromObject(valuesForHash)

        const hashData = totalValues(arrayValues)

        let secretWord = createSecretWord(hashData, gameMode)

        secretWord = hashData + secretWord

        const hash = createHash(secretWord);

        const newGame = await game.createGame({peerId,hash,hashKey:secretWord,gameMode: gameMode,endTime:60,results:valuesForHash,isEnded:false});
    }
    if (checkGame) {
        gameId = await game.getGameId(peerId)
    }

    let userBet = await msg.question(`${gamePayloadsTranslate[betOn][0]} @id${id}(${name}), –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –Ω–∞ ${gamePayloadsTranslate[betOn][1]}:`) //{keyboard: blackjackBet(balance)})
    if (!balance) return msg.send(`‚ùó –£ –≤–∞—Å –Ω–µ—Ç üé≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.`)
    let reserve = 10000000000
    let finalBet = Number(userBet.text.replace(/–∫/g, "000").replace(/\s/g, ""));
    if (!finalBet || finalBet < 0) return msg.send(`‚ùó –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`)
    if (finalBet > balance) return msg.send(`‚ùó –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ üé≤`)
    if (finalBet > reserve) return msg.send(`‚ùó –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–µ–∑–µ—Ä–≤ –±–æ—Ç–∞ –º–∞–ª –¥–ª—è —Ç–∞–∫–æ–π —Å—Ç–∞–≤–∫–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–¥–Ω–µ–µ`)

    const newBet = await bet.createBet({
        gameId: gameId,
        userId : id,
        betType: betOn,
        betAmount: Number(finalBet)
    })
    return msg.send(`‚úÖ @id${id}(${name}), —É—Å–ø–µ—à–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ${numberWithSpace(finalBet.toFixed(0))} üé≤ –Ω–∞ ${gamePayloadsTranslate[betOn][1]}!`)
}
