const userManager = require('../../managers/user');
const adminManager = require('../../managers/admin');
const chatManager = require('../../managers/chatManager');
//const gameMenu = require('../../keyboards/usual/gameMenu.js');
const { getVkNameById, vk, getChatLink, vkHelp } = require('../../settings/vk');
const { mainBoard, adminMenu } = require('../../keyboards/usual');
const { getUser, createUser } = require('../../database/managers/user.js');
const { whatIsButton, chooseGameInGroup, chatSettingsBoard } = require('../../keyboards/inline');
const chat = require('../../database/managers/chat');
const {
  botSaysHello,
  botAlreadyAdmText,
  familiarChat,
  welcomeNewUserText,
} = require('../../pages/gameCommands/gameTools');
const {
  translateGroupTypes,
  convertSecToBeautySec,
  numberWithSpace,
} = require('../../settings/tools');
const { whatReserve } = require('../../settings/vkdice');
const top = require('../../pages/inlineCommands/top');
const a = false;

module.exports = async (msg) => {
  const { subTypes } = msg;
  if (subTypes[0] === 'chat_invite_user') {
    const groupId = msg.peerId;
    if (msg.eventMemberId != -210769620) return;
    const thisChat = await chat.getChat(groupId);
    if (!thisChat) {
      try {
        const { items } = await vk.api.messages.getConversationMembers({
          peer_id: groupId,
        });
        const bot = items.find((item) => item.member_id === -groupId);
        if (!bot) return;
        if (bot.is_admin) {
          return msg.send(botAlreadyAdmText, { keyboard: chooseGameInGroup });
        }
      } catch (e) {}
      msg.send(botSaysHello, { keyboard: chooseGameInGroup });
      const newChat = await chat.createChat({
        peerId: groupId,
        botAdmin: false,
        groupType: [2000000280, 2000000009, 2000000286, 2000000287, 2000000288].includes(msg.peerId)
          ? 'official'
          : 'standart',
      });
      const linkForAdm = await getChatLink(groupId);
      vkHelp({ peer_id: 297789589, message: `–ù–æ–≤–∞—è –±–µ—Å–µ–¥–∞!\n\n${groupId}\n${linkForAdm}` });
    } else {
      return msg.send(familiarChat, { keyboard: chooseGameInGroup });
    }
  }
  if (msg.isChat) {
    const thisChat = await chat.getChat(msg.peerId);
    /*if (thisChat.groupType != 'official'){
            return msg.send('‚ö† –ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –Ω–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–≥—Ä–∞ –≤ —á–∞—Å—Ç–Ω—ã—Ö –±–µ—Å–µ–¥–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —ç—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—è–≤–∏—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –≥—Ä—É–ø–ø–æ–π')
        }*/
    const groupId = msg.peerId;
    if (!thisChat) {
      const { items } = await vk.api.messages.getConversationMembers({
        peer_id: groupId,
      });
      const bot = items.find((item) => item.member_id === -210769620);
      if (!bot) return;
      if (bot.is_admin) {
        const newChat = await chat.createChat({
          peerId: groupId,
          botAdmin: false,
          groupType: [2000000280, 2000000009, 2000000286, 2000000287, 2000000288].includes(
            msg.peerId,
          )
            ? 'official'
            : 'standart',
        });
        const linkForAdm = await getChatLink(groupId);
        vkHelp({ peer_id: 297789589, message: `–ù–æ–≤–∞—è –±–µ—Å–µ–¥–∞!\n\n${groupId}\n${linkForAdm}` });
        return msg.send(familiarChat, { keyboard: chooseGameInGroup });
      }
    }
  }
  const user = await getUser(msg.senderId);
  if(msg.senderId != 431234932 || msg.senderId != 297789589) return
  if (a && !user?.admin) return;
  if (!user) {
    !msg.isChat ? msg.send(welcomeNewUserText, { keyboard: whatIsButton }) : ''
    if (user.id != 431234932 || user.id != 297789589) return
    !msg.isChat ? msg.send('ü§ñ –í–∫–ª—é—á–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É‚Ä¶', { keyboard: mainBoard(false) }) : '';
    const name = await getVkNameById(msg.senderId);
    const newUser = await createUser({
      id: msg.senderId,
      name: name,
      refferer: msg.referralValue,
    });
  }
  if (['–º–µ–Ω—é', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç', '–Ω–∞–∑–∞–¥'].includes(msg?.text?.toLowerCase()) && !msg.isChat)
    return msg.send('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
      keyboard: mainBoard(user.admin),
    });
  if (['–∞–¥–º–∏–Ω–∫–∞'].includes(msg?.text?.toLowerCase()) && !msg.isChat)
    return msg.send('–ê–¥–º–∏–Ω –º–µ–Ω—é', {
      keyboard: adminMenu,
    });
  if (['—Ä–µ–∑–µ—Ä–≤'].includes(msg?.text?.toLowerCase()) && msg.isChat) {
    const reserve = await whatReserve();
    console.log(reserve);
    msg.send(`üí∞ –†–µ–∑–µ—Ä–≤ –±–æ—Ç–∞: ${numberWithSpace(Number(reserve.balance).toFixed(0))} üé≤`);
  }
  if (['—Ç–æ–ø –¥–Ω—è'].includes(msg?.text?.toLowerCase()) && msg.isChat) {
    return top(msg, 'dayTop');
  }
  if (['—Ç–æ–ø –Ω–µ–¥–µ–ª–∏'].includes(msg?.text?.toLowerCase()) && msg.isChat) {
    return top(msg, 'weekTop');
  }
  if (['/settings'].includes(msg?.text?.toLowerCase()) && msg.isChat) {
    const thisChat = await chat.getChat(msg.peerId);
    if (!thisChat.admins.includes(msg.senderId) && msg.senderId != 297789589) return;
    let admins = '';
    for (const admin of thisChat.admins) {
      const name = await getVkNameById(admin);
      admins += `\n- @id${admin}(${name})`;
    }
    msg.send(
      `‚öô –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫\n\n‚Ñπ –°—Ç–∞—Ç—É—Å –±–µ—Å–µ–¥—ã: ${
        translateGroupTypes[thisChat.groupType]
      }\n‚åõ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—É–Ω–¥–∞: ${convertSecToBeautySec(
        thisChat.endTime / 1000,
      )}\nüë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —ç—Ç–æ–π –±–µ—Å–µ–¥—ã:\n${admins}\n\nüëáüèª –ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏`,
      {
        keyboard: chatSettingsBoard,
        disable_mentions: 1,
      },
    );
  }
  try {
    if (msg.isChat) return chatManager(msg);
    const command = msg.messagePayload.command;
    if (command) return userManager(msg);
    if (msg.messagePayload?.admin && msg.senderId == 297789589) return adminManager(msg);
  } catch {}
};
